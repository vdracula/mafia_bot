import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# === –ò–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
from db import init_db, save_game_to_db

# === –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç ===
rooms = {}

# === –†–æ–ª–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
ROLE_IMAGES = {
    "–ú–∞—Ñ–∏—è": "https://i.imgur.com/Qlntb6R.jpg", 
    "–î–æ–∫—Ç–æ—Ä": "https://i.imgur.com/LfZxJQg.jpg", 
    "–ö–æ–º–∏—Å—Å–∞—Ä": "https://i.imgur.com/RjVBYGq.jpg", 
    "–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å": "https://i.imgur.com/WvK7Y9m.jpg" 
}

DEFAULT_ROLE_COUNTS = {
    "–ú–∞—Ñ–∏—è": 1,
    "–î–æ–∫—Ç–æ—Ä": 1,
    "–ö–æ–º–∏—Å—Å–∞—Ä": 1,
    "–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å": 5
}

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
async def get_user_name(context, user_id):
    try:
        user = await context.bot.get_chat(user_id)
        return user.first_name or user.username or "–ò–≥—Ä–æ–∫"
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

def assign_roles(room):
    role_list = []
    for role, count in room["roles"].items():
        role_list.extend([role] * count)

    players = room["players"]
    random.shuffle(role_list)

    while len(role_list) < len(players):
        role_list.append("–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å")

    room["assigned_roles"] = dict(zip(players, role_list))

async def send_private_role(context, user_id, role):
    try:
        await context.bot.send_photo(chat_id=user_id, photo=ROLE_IMAGES[role], caption=f"–í–∞—à–∞ —Ä–æ–ª—å: {role}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await context.bot.send_message(chat_id=user_id, text=f"–í–∞—à–∞ —Ä–æ–ª—å: {role}")

# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –ú–∞—Ñ–∏—é.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = """
    –ö–æ–º–∞–Ω–¥—ã:
    /create_room [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É
    /join_room [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    /start_game - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
    /set_roles - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª–∏ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    /find_game - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
    /admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    """
    await update.message.reply_text(text)

async def create_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) == 0:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã.")
        return

    room_name = context.args[0]
    if room_name in rooms:
        await update.message.reply_text("–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    user_id = update.effective_user.id
    rooms[room_name] = {
        "host": user_id,
        "players": [],
        "roles": DEFAULT_ROLE_COUNTS.copy(),
        "assigned_roles": {},
        "started": False,
        "stage": None,
        "votes": {}
    }
    await update.message.reply_text(f"‚úÖ –ö–æ–º–Ω–∞—Ç–∞ '{room_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join_room {room_name} —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.")

async def join_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) == 0:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã.")
        return

    room_name = context.args[0]
    if room_name not in rooms:
        await update.message.reply_text("–¢–∞–∫–æ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    room = rooms[room_name]
    user = update.effective_user

    if user.id in room["players"]:
        await update.message.reply_text("–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.")
        return

    room["players"].append(user.id)
    await update.message.reply_text(f"‚úÖ {user.first_name}, –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ '{room_name}'.")
    await show_current_roles(update, context, room_name, room)

async def set_roles_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    for room_name, room in rooms.items():
        if user_id == room["host"] and not room["started"]:
            keyboard = [
                [InlineKeyboardButton("–ú–∞—Ñ–∏—è", callback_data="edit_mafia")],
                [InlineKeyboardButton("–î–æ–∫—Ç–æ—Ä", callback_data="edit_doctor")],
                [InlineKeyboardButton("–ö–æ–º–∏—Å—Å–∞—Ä", callback_data="edit_sheriff")],
                [InlineKeyboardButton("–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å", callback_data="edit_peaceful")],
                [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="confirm_roles")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=reply_markup)
            return

    await update.message.reply_text("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–µ–¥—É—â–∏–º –∏–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å.")

async def edit_role_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    role_key = query.data.replace("edit_", "")

    role_map = {
        "mafia": "–ú–∞—Ñ–∏—è",
        "doctor": "–î–æ–∫—Ç–æ—Ä",
        "sheriff": "–ö–æ–º–∏—Å—Å–∞—Ä",
        "peaceful": "–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å"
    }

    role = role_map.get(role_key)
    if not role:
        return

    room_name = None
    for rn, r in rooms.items():
        if r["host"] == query.from_user.id:
            room_name = rn
            break

    if not room_name:
        return

    room = rooms[room_name]
    current_count = room["roles"][role]

    buttons = []
    for delta in [-1, 0, +1]:
        new_count = max(0, current_count + delta)
        buttons.append(
            InlineKeyboardButton(f"{new_count}", callback_data=f"set_{role_key}_{new_count}")
        )

    keyboard = [[*buttons]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–æ–ª–∏ '{role}':", reply_markup=reply_markup)

async def update_role_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("_")
    role_key = data[1]
    count = int(data[2])

    role_map = {
        "mafia": "–ú–∞—Ñ–∏—è",
        "doctor": "–î–æ–∫—Ç–æ—Ä",
        "sheriff": "–ö–æ–º–∏—Å—Å–∞—Ä",
        "peaceful": "–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å"
    }

    role = role_map.get(role_key)
    if not role:
        return

    room_name = None
    for rn, r in rooms.items():
        if r["host"] == query.from_user.id:
            room_name = rn
            break

    if not room_name:
        return

    room = rooms[room_name]
    room["roles"][role] = count

    keyboard = [
        [InlineKeyboardButton("–ú–∞—Ñ–∏—è", callback_data="edit_mafia")],
        [InlineKeyboardButton("–î–æ–∫—Ç–æ—Ä", callback_data="edit_doctor")],
        [InlineKeyboardButton("–ö–æ–º–∏—Å—Å–∞—Ä", callback_data="edit_sheriff")],
        [InlineKeyboardButton("–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å", callback_data="edit_peaceful")],
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="confirm_roles")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=reply_markup)

async def confirm_roles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    room_name = None
    for rn, r in rooms.items():
        if r["host"] == query.from_user.id:
            room_name = rn
            break

    if not room_name:
        return

    room = rooms[room_name]
    total_players = sum(room["roles"].values())

    msg = f"‚úÖ –†–æ–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n\n"
    for role, count in room["roles"].items():
        msg += f"{role}: {count}\n"
    msg += f"\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {total_players}"

    await query.edit_message_text(msg)

async def show_current_roles(update: Update, context: ContextTypes.DEFAULT_TYPE, room_name=None, room=None):
    if not room_name or not room:
        user_id = update.effective_user.id
        for rn, r in rooms.items():
            if user_id in r["players"]:
                room_name = rn
                room = r
                break
        else:
            return

    msg = "üé≠ –¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏:\n\n"
    for role, count in room["roles"].items():
        msg += f"{role}: {count}\n"

    total = sum(room["roles"].values())
    msg += f"\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {total}"
    await update.message.reply_text(msg)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("edit_"):
        await edit_role_count(update, context)
    elif data.startswith("set_"):
        await update_role_count(update, context)
    elif data == "confirm_roles":
        await confirm_roles(update, context)
    elif data.startswith("vote_"):
        await vote_handler(update, context)

# === –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–Ω—ë–º ===
async def vote_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("vote_"):
        voted_player_id = int(data.split("_")[1])
        user_id = query.from_user.id
        chat_id = query.message.chat_id

        for room_name, room in rooms.items():
            if chat_id == room_name and room["stage"] == "day":
                room["votes"][user_id] = voted_player_id
                voter_name = await get_user_name(context, user_id)
                target_name = await get_user_name(context, voted_player_id)
                await query.edit_message_text(text=f"{voter_name}, –≤—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {target_name}")

                if len(room["votes"]) == len(room["players"]):
                    result = count_votes(room["votes"])
                    kicked = max(result, key=result.get)
                    kicked_name = await get_user_name(context, kicked)
                    await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –ò–≥—Ä–æ–∫ {kicked_name} –±—ã–ª –∏–∑–≥–Ω–∞–Ω.")
                    room["players"].remove(kicked)
                    room["stage"] = "night"
                    room["votes"] = {}

def count_votes(votes):
    result = {}
    for v in votes.values():
        result[v] = result.get(v, 0) + 1
    return result

# === –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã ===
async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    for room_name, room in rooms.items():
        if user_id == room["host"] and not room["started"]:
            if len(room["players"]) < 4:
                await update.message.reply_text("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞.")
                return

            assign_roles(room)
            room["started"] = True
            room["stage"] = "night"
            room["votes"] = {}

            for player_id in room["players"]:
                role = room["assigned_roles"][player_id]
                await send_private_role(context, player_id, role)

            await update.message.reply_text("üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\nüåô –ù–æ—á—å. –í—Å–µ –∑–∞–∫—Ä—ã–≤–∞—é—Ç –≥–ª–∞–∑–∞...")
            return

    await update.message.reply_text("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–µ–¥—É—â–∏–º –∏–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞.")

# === –ê–≤—Ç–æ–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ ===
async def find_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    found = False

    for room_name, room in rooms.items():
        if not room["started"] and len(room["players"]) < 8:
            room["players"].append(user_id)
            await update.message.reply_text(f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ '{room_name}'!")
            found = True
            break

    if not found:
        new_room = f"room_{len(rooms) + 1}"
        rooms[new_room] = {
            "host": user_id,
            "players": [user_id],
            "roles": {"–ú–∞—Ñ–∏—è": 1, "–î–æ–∫—Ç–æ—Ä": 1, "–ö–æ–º–∏—Å—Å–∞—Ä": 1, "–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å": 5},
            "assigned_roles": {},
            "started": False,
            "stage": None,
            "votes": {}
        }
        await update.message.reply_text(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞: {new_room}")

# === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ===
YOUR_ADMIN_ID = 123456789  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != YOUR_ADMIN_ID:
        await update.message.reply_text("üîí –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    text = "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n\n"
    for room_name, room in rooms.items():
        text += f"–ö–æ–º–Ω–∞—Ç–∞: {room_name}\n –ò–≥—Ä–æ–∫–æ–≤: {len(room['players'])}\n –°—Ç–∞—Ç—É—Å: {'üéÆ –í –∏–≥—Ä–µ' if room['started'] else 'üïí –û–∂–∏–¥–∞–µ—Ç'}\n\n"

    keyboard = [
        [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data="end_game_admin")],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä", callback_data="view_history")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, reply_markup=reply_markup)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == '__main__':
    init_db()

    app = ApplicationBuilder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("create_room", create_room))
    app.add_handler(CommandHandler("join_room", join_room))
    app.add_handler(CommandHandler("start_game", start_game))
    app.add_handler(CommandHandler("set_roles", set_roles_start))
    app.add_handler(CommandHandler("find_game", find_game))
    app.add_handler(CommandHandler("admin", admin_panel))

    app.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()