import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# === –ò–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) ===
def init_db():
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# === –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç ===
rooms = {}

# === –†–æ–ª–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
ROLE_IMAGES = {
    "–ú–∞—Ñ–∏—è": "https://i.imgur.com/Qlntb6R.jpg", 
    "–î–æ–∫—Ç–æ—Ä": "https://i.imgur.com/LfZxJQg.jpg", 
    "–ö–æ–º–∏—Å—Å–∞—Ä": "https://i.imgur.com/RjVBYGq.jpg", 
    "–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å": "https://i.imgur.com/WvK7Y9m.jpg" 
}

DEFAULT_ROLE_COUNTS = {
    "–ú–∞—Ñ–∏—è": 1,
    "–î–æ–∫—Ç–æ—Ä": 1,
    "–ö–æ–º–∏—Å—Å–∞—Ä": 1,
    "–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å": 5
}

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
async def get_user_name(context, user_id):
    try:
        user = await context.bot.get_chat(user_id)
        return user.first_name or user.username or "–ò–≥—Ä–æ–∫"
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"


def assign_roles(room):
    role_list = []
    for role, count in room["roles"].items():
        role_list.extend([role] * count)
    players = room["players"]
    random.shuffle(role_list)
    while len(role_list) < len(players):
        role_list.append("–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å")
    room["assigned_roles"] = dict(zip(players, role_list))


async def send_private_role(context, user_id, role):
    try:
        await context.bot.send_photo(chat_id=user_id, photo=ROLE_IMAGES[role], caption=f"–í–∞—à–∞ —Ä–æ–ª—å: {role}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await context.bot.send_message(chat_id=user_id, text=f"–í–∞—à–∞ —Ä–æ–ª—å: {role}")


# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="menu_play")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")],
        [InlineKeyboardButton("üö™ –ö–æ–º–Ω–∞—Ç—ã", callback_data="menu_rooms")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –ú–∞—Ñ–∏—é.", reply_markup=reply_markup)


# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == "menu_play":
        keyboard = [
            [InlineKeyboardButton("üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É", callback_data="create_room_prompt")],
            [InlineKeyboardButton("üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ", callback_data="join_room_prompt")],
            [InlineKeyboardButton("üîÑ –ê–≤—Ç–æ–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", callback_data="auto_join_prompt")],
            [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game_prompt")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    elif data == "menu_help":
        text = """
        ‚ùì –ü–æ–º–æ—â—å:
        /create_room - –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É
        /join_room - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
        /rooms - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
        /start_game - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
        /set_roles - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª–∏
        /admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        """
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)
    elif data == "menu_rooms":
        if not rooms:
            await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç.")
            return
        keyboard = []
        for room_name in rooms:
            keyboard.append([InlineKeyboardButton(room_name, callback_data=f"room_info_{room_name}")])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç:", reply_markup=reply_markup)
    elif data.startswith("room_info_"):
        room_name = data.replace("room_info_", "")
        if room_name not in rooms:
            await query.answer("–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        room = rooms[room_name]
        player_names = "\n".join([await get_user_name(context, pid) for pid in room["players"]])
        msg = f"üìå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ '{room_name}':\n"
        msg += f"–°—Ç–∞—Ç—É—Å: {'üéÆ –í –∏–≥—Ä–µ' if room['started'] else 'üïí –û–∂–∏–¥–∞–µ—Ç'}\n"
        msg += f"–ò–≥—Ä–æ–∫–æ–≤: {len(room['players'])}/8\n"
        msg += f"–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{player_names}"
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_rooms")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(msg, reply_markup=reply_markup)
    elif data == "auto_join_prompt":
        await find_game(query, context)
        await query.edit_message_text("–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ.")
    elif data == "menu_back":
        keyboard = [
            [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="menu_play")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")],
            [InlineKeyboardButton("üö™ –ö–æ–º–Ω–∞—Ç—ã", callback_data="menu_rooms")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = """
    ‚ùì –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/create_room [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É
/join_room [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
/start_game - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/set_roles - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª–∏
/find_game - –ê–≤—Ç–æ–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
"""
    await update.message.reply_text(text)


# === –ö–æ–º–∞–Ω–¥—ã ===
async def create_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if isinstance(update, Update):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã:")
    else:
        await update.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã:")


async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    if context.user_data.get('waiting_for_room_name'):
        room_name = text
        if room_name in rooms:
            await update.message.reply_text("–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return
        rooms[room_name] = {
            "host": user_id,
            "chat_id": update.effective_chat.id,  # <-- —Å–æ—Ö—Ä–∞–Ω—è–µ–º chat_id
            "players": [],
            "roles": DEFAULT_ROLE_COUNTS.copy(),
            "assigned_roles": {},
            "started": False,
            "stage": None,
            "votes": {}
        }
        await update.message.reply_text(f"‚úÖ –ö–æ–º–Ω–∞—Ç–∞ '{room_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        context.user_data.pop('waiting_for_room_name', None)
        rooms[room_name]["players"].append(user_id)
        await update.message.reply_text(f"–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ '{room_name}'.")
        await show_current_roles(update, context, room_name, rooms[room_name])


# === –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ —á–µ—Ä–µ–∑ –≤—ã–±–æ—Ä ===
async def join_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not rooms:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç.")
        return
    keyboard = [[InlineKeyboardButton(room_name, callback_data=f"select_join_{room_name}")] for room_name in rooms]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:", reply_markup=reply_markup)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã ===
async def select_room_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("select_join_"):
        room_name = data.replace("select_join_", "")
        if room_name in rooms:
            room = rooms[room_name]
            if query.from_user.id in room["players"]:
                await query.edit_message_text("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.")
                return
            room["players"].append(query.from_user.id)
            await query.edit_message_text(f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ '{room_name}'.")
            await show_current_roles(query, context, room_name, room)


# === –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç ===
async def list_rooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not rooms:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç.")
        return
    msg = "üö™ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:\n"
    for room_name, room in rooms.items():
        status = "üéÆ –í –∏–≥—Ä–µ" if room["started"] else "üïí –û–∂–∏–¥–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤"
        players_count = len(room["players"])
        msg += f"‚Ä¢ {room_name} ({players_count} –∏–≥—Ä–æ–∫–æ–≤) ‚Äî {status}\n"
    await update.message.reply_text(msg)


# === –ü—Ä–æ—á–∏–µ –∫–æ–º–∞–Ω–¥—ã ===
async def set_roles_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    for room_name, room in rooms.items():
        if user_id == room["host"] and not room["started"]:
            keyboard = [
                [InlineKeyboardButton("–ú–∞—Ñ–∏—è", callback_data="edit_mafia")],
                [InlineKeyboardButton("–î–æ–∫—Ç–æ—Ä", callback_data="edit_doctor")],
                [InlineKeyboardButton("–ö–æ–º–∏—Å—Å–∞—Ä", callback_data="edit_sheriff")],
                [InlineKeyboardButton("–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å", callback_data="edit_peaceful")],
                [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="confirm_roles")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=reply_markup)
            return
    await update.message.reply_text("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–µ–¥—É—â–∏–º –∏–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å.")


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–æ–ª–µ–π (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) ===
async def edit_role_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    role_key = query.data.replace("edit_", "")
    role_map = {
        "mafia": "–ú–∞—Ñ–∏—è",
        "doctor": "–î–æ–∫—Ç–æ—Ä",
        "sheriff": "–ö–æ–º–∏—Å—Å–∞—Ä",
        "peaceful": "–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å"
    }
    role = role_map.get(role_key)
    if not role:
        return
    room_name = None
    for rn, r in rooms.items():
        if r["host"] == query.from_user.id:
            room_name = rn
            break
    if not room_name:
        return
    room = rooms[room_name]
    current_count = room["roles"][role]
    buttons = []
    for delta in [-1, 0, +1]:
        new_count = max(0, current_count + delta)
        buttons.append(
            InlineKeyboardButton(f"{new_count}", callback_data=f"set_{role_key}_{new_count}")
        )
    keyboard = [[*buttons]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–æ–ª–∏ '{role}':", reply_markup=reply_markup)


async def update_role_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split("_")
    role_key = data[1]
    count = int(data[2])
    role_map = {
        "mafia": "–ú–∞—Ñ–∏—è",
        "doctor": "–î–æ–∫—Ç–æ—Ä",
        "sheriff": "–ö–æ–º–∏—Å—Å–∞—Ä",
        "peaceful": "–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å"
    }
    role = role_map.get(role_key)
    if not role:
        return
    room_name = None
    for rn, r in rooms.items():
        if r["host"] == query.from_user.id:
            room_name = rn
            break
    if not room_name:
        return
    room = rooms[room_name]
    room["roles"][role] = count
    keyboard = [
        [InlineKeyboardButton("–ú–∞—Ñ–∏—è", callback_data="edit_mafia")],
        [InlineKeyboardButton("–î–æ–∫—Ç–æ—Ä", callback_data="edit_doctor")],
        [InlineKeyboardButton("–ö–æ–º–∏—Å—Å–∞—Ä", callback_data="edit_sheriff")],
        [InlineKeyboardButton("–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å", callback_data="edit_peaceful")],
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="confirm_roles")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=reply_markup)


async def confirm_roles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    room_name = None
    for rn, r in rooms.items():
        if r["host"] == query.from_user.id:
            room_name = rn
            break
    if not room_name:
        return
    room = rooms[room_name]
    total_players = sum(room["roles"].values())
    msg = f"‚úÖ –†–æ–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n"
    for role, count in room["roles"].items():
        msg += f"{role}: {count}\n"
    msg += f"\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {total_players}"
    await query.edit_message_text(msg)


async def show_current_roles(update: Update, context: ContextTypes.DEFAULT_TYPE, room_name=None, room=None):
    if not room_name or not room:
        user_id = update.effective_user.id
        for rn, r in rooms.items():
            if user_id in r["players"]:
                room_name = rn
                room = r
                break
        else:
            return
    msg = "üé≠ –¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏:\n"
    for role, count in room["roles"].items():
        msg += f"{role}: {count}\n"
    total = sum(room["roles"].values())
    msg += f"\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {total}"
    await update.message.reply_text(msg)


# === –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–Ω—ë–º ===
async def vote_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("vote_"):
        voted_player_id = int(data.split("_")[1])
        user_id = query.from_user.id
        chat_id = query.message.chat_id
        for room_name, room in rooms.items():
            if chat_id == room["chat_id"] and room["stage"] == "day":  # –¢–µ–ø–µ—Ä—å —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º chat_id
                room["votes"][user_id] = voted_player_id
                voter_name = await get_user_name(context, user_id)
                target_name = await get_user_name(context, voted_player_id)
                await query.edit_message_text(text=f"{voter_name}, –≤—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ {target_name}")
                if len(room["votes"]) == len(room["players"]):
                    result = count_votes(room["votes"])
                    kicked = max(result, key=result.get)
                    kicked_name = await get_user_name(context, kicked)
                    await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –ò–≥—Ä–æ–∫ {kicked_name} –±—ã–ª –∏–∑–≥–Ω–∞–Ω.")
                    room["players"].remove(kicked)
                    room["stage"] = "night"
                    room["votes"] = {}


def count_votes(votes):
    result = {}
    for v in votes.values():
        result[v] = result.get(v, 0) + 1
    return result


# === –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã ===
async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    for room_name, room in rooms.items():
        if user_id == room["host"] and not room["started"]:
            if len(room["players"]) < 4:
                await update.message.reply_text("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞.")
                return
            assign_roles(room)
            room["started"] = True
            room["stage"] = "night"
            room["votes"] = {}
            for player_id in room["players"]:
                role = room["assigned_roles"][player_id]
                await send_private_role(context, player_id, role)
            await update.message.reply_text("üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\nüåô –ù–æ—á—å. –í—Å–µ –∑–∞–∫—Ä—ã–≤–∞—é—Ç –≥–ª–∞–∑–∞...")
            return
    await update.message.reply_text("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–µ–¥—É—â–∏–º –∏–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞.")


# === –ê–≤—Ç–æ–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ ===
async def find_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    found = False
    for room_name, room in rooms.items():
        if not room["started"] and len(room["players"]) < 8:
            room["players"].append(user_id)
            await update.message.reply_text(f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ '{room_name}'!")
            found = True
            break
    if not found:
        new_room = f"room_{len(rooms) + 1}"
        rooms[new_room] = {
            "host": user_id,
            "chat_id": update.effective_chat.id,  # <-- —Å–æ—Ö—Ä–∞–Ω—è–µ–º chat_id
            "players": [user_id],
            "roles": {"–ú–∞—Ñ–∏—è": 1, "–î–æ–∫—Ç–æ—Ä": 1, "–ö–æ–º–∏—Å—Å–∞—Ä": 1, "–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å": 5},
            "assigned_roles": {},
            "started": False,
            "stage": None,
            "votes": {}
        }
        await update.message.reply_text(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞: {new_room}")


# === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ===
YOUR_ADMIN_ID = 775424515  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != YOUR_ADMIN_ID:
        await update.message.reply_text("üîí –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    text = "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n"
    for room_name, room in rooms.items():
        text += f"–ö–æ–º–Ω–∞—Ç–∞: {room_name}\n –ò–≥—Ä–æ–∫–æ–≤: {len(room['players'])}\n –°—Ç–∞—Ç—É—Å: {'üéÆ –í –∏–≥—Ä–µ' if room['started'] else 'üïí –û–∂–∏–¥–∞–µ—Ç'}\n"
    keyboard = [
        [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data="end_game_admin")],
        [InlineKeyboardButton("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É", callback_data="restart_game_admin")],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä", callback_data="view_history")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, reply_markup=reply_markup)


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ===
async def admin_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == "restart_game_admin":
        keyboard = []
        for room_name in rooms:
            keyboard.append([InlineKeyboardButton(room_name, callback_data=f"restart_room_{room_name}")])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back_admin")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:", reply_markup=reply_markup)
    elif data.startswith("restart_room_"):
        room_name = data.replace("restart_room_", "")
        if room_name in rooms:
            room = rooms[room_name]
            room["started"] = False
            room["stage"] = None
            room["votes"] = {}
            room["assigned_roles"] = {}
            await query.edit_message_text(f"üîÑ –ò–≥—Ä–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ '{room_name}' –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞.")
    elif data == "menu_back_admin":
        await admin_panel(update, context)


# === –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ===
async def handle_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()

    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω callback: {data}")

     if data == "menu_play":
        from main import create_play_menu
        await create_play_menu(query)
    elif data.startswith("room_info_"):
        await show_room_info(update, context, data)
    elif data == "menu_help":
        await show_help_menu(update, context)
    elif data == "auto_join_prompt":
        await auto_join_game(update, context)
    elif data == "menu_back":
        await back_to_main_menu(update, context)
    elif data.startswith("select_join_"):
        await select_room_handler(update, context)
    elif data.startswith("edit_"):
        await edit_role_count(update, context)
    elif data.startswith("set_"):
        await update_role_count(update, context)
    elif data == "confirm_roles":
        await confirm_roles(update, context)
    elif data.startswith("vote_"):
        await vote_handler(update, context)
    elif data in ["restart_game_admin", "end_game_admin", "view_history"]:
        await admin_button_handler(update, context)
    elif data.startswith("restart_room_"):
        await admin_button_handler(update, context)
    elif data == "menu_back_admin":
        await admin_panel(update, context)


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == '__main__':
    init_db()
    app = ApplicationBuilder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("create_room", create_room))
    app.add_handler(CommandHandler("join_room", join_room))
    app.add_handler(CommandHandler("rooms", list_rooms))
    app.add_handler(CommandHandler("start_game", start_game))
    app.add_handler(CommandHandler("set_roles", set_roles_start))
    app.add_handler(CommandHandler("find_game", find_game))
    app.add_handler(CommandHandler("admin", admin_panel))

    app.add_handler(CallbackQueryHandler(handle_callbacks))  # <-- –æ–¥–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()