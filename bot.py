import asyncio
import random
import logging
from collections import Counter
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.enums import ParseMode

TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨"  # <-- –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

ROLE_IMAGES = {
    "–ú–∞—Ñ–∏—è": [
        "images/mafia1.jpg",
        "images/mafia2.jpg",
        "images/mafia3.jpg"
    ],
    "–î–æ–∫—Ç–æ—Ä": "images/doctor.jpg",
    "–ö–æ–º–∏—Å—Å–∞—Ä": "images/commissar.jpg",
    "–ú–∏—Ä–Ω—ã–π": [
        "images/citizen1.jpg",
        "images/citizen2.jpg"
    ]
}

players = {}         # user_id: username
roles = {}           # user_id: —Ä–æ–ª—å
alive_players = set()
votes = {}           # user_id: –∑–∞ –∫–æ–≥–æ –≥–æ–ª–æ—Å—É–µ—Ç
game_started = False

# –ö–Ω–æ–ø–∫–∏
def get_main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join")],
        [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="startgame")]
    ])

def back_to_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu")]
    ])

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ú–∞—Ñ–∏—è!</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.",
        reply_markup=get_main_menu()
    )

@dp.callback_query(lambda c: c.data == "menu")
async def cb_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu()
    )

@dp.callback_query(lambda c: c.data == "join")
async def cb_join(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.full_name
    if user_id not in players:
        players[user_id] = username
        await callback.answer("‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å.")
    else:
        await callback.answer("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ.")
    await callback.message.edit_text(
        f"üë• –ò–≥—Ä–æ–∫–∏:\n" + "\n".join(players.values()),
        reply_markup=get_main_menu()
    )

@dp.callback_query(lambda c: c.data == "startgame")
async def cb_startgame(callback: CallbackQuery):
    global game_started, alive_players
    if game_started:
        await callback.answer("–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç.")
        return
    if len(players) < 3:
        await callback.message.edit_text(
            "‚ùó –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –∏–≥—Ä–æ–∫–∞.",
            reply_markup=back_to_menu()
        )
        return

    game_started = True
    alive_players = set(players.keys())
    await callback.message.answer("üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –†–æ–ª–∏ —Ä–∞—Å—Å—ã–ª–∞—é—Ç—Å—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    ids = list(players.keys())
    random.shuffle(ids)

    mafia_count = 2 if len(ids) >= 5 else 1
    mafia_ids = [ids.pop() for _ in range(mafia_count)]
    for uid in mafia_ids:
        roles[uid] = "–ú–∞—Ñ–∏—è"

    doctor = ids.pop() if ids else None
    if doctor:
        roles[doctor] = "–î–æ–∫—Ç–æ—Ä"

    commissar = ids.pop() if ids else None
    if commissar:
        roles[commissar] = "–ö–æ–º–∏—Å—Å–∞—Ä"

    for uid in ids:
        roles[uid] = "–ú–∏—Ä–Ω—ã–π"

    # –†–∞—Å—Å—ã–ª–∞–µ–º —Ä–æ–ª–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
    for uid, role in roles.items():
        image_data = ROLE_IMAGES[role]
        if isinstance(image_data, list):
            image = random.choice(image_data)
        else:
            image = image_data

        caption = f"–í–∞—à–∞ —Ä–æ–ª—å: {role}"

        with open(image, "rb") as photo_file:
            await bot.send_photo(uid, photo=photo_file, caption=caption)

    await callback.message.edit_text(
        "‚úÖ –†–æ–ª–∏ —Ä–æ–∑–¥–∞–Ω—ã.\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /vote",
        reply_markup=back_to_menu()
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
@dp.message(commands=["vote"])
async def vote(message: types.Message):
    if not game_started:
        await message.answer("–ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å.")
        return

    for uid in alive_players:
        kb = InlineKeyboardMarkup(row_width=1)
        for target_id in alive_players:
            if uid == target_id:
                continue
            kb.add(InlineKeyboardButton(
                text=players[target_id],
                callback_data=f"vote_{target_id}"
            ))
        await bot.send_message(uid, "üîò –í—ã–±–µ—Ä–∏—Ç–µ, –∑–∞ –∫–æ–≥–æ –≥–æ–ª–æ—Å—É–µ—Ç–µ:", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤
@dp.callback_query(lambda c: c.data and c.data.startswith("vote_"))
async def cb_vote(callback: CallbackQuery):
    voter = callback.from_user.id
    if voter not in alive_players:
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å.")
        return
    target_id = int(callback.data.split("_")[1])
    if target_id not in alive_players:
        await callback.answer("–ò–≥—Ä–æ–∫ —É–∂–µ –≤—ã–±—ã–ª.")
        return
    votes[voter] = target_id
    await callback.answer("–í–∞—à –≥–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç.")

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
    if len(votes) == len(alive_players):
        await tally_votes(callback.message.chat.id)

# –ü–æ–¥—Å—á—ë—Ç –≥–æ–ª–æ—Å–æ–≤
async def tally_votes(chat_id):
    tally = Counter(votes.values())
    text = "üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:</b>\n"
    for uid, count in tally.items():
        text += f"‚ñ´Ô∏è {players[uid]} ‚Äî {count} –≥–æ–ª–æ—Å(–æ–≤)\n"

    # –ò–≥—Ä–æ–∫ —Å –º–∞–∫—Å–∏–º—É–º–æ–º –≥–æ–ª–æ—Å–æ–≤
    if tally:
        eliminated_id, _ = tally.most_common(1)[0]
        alive_players.remove(eliminated_id)
        text += f"\n‚ò†Ô∏è {players[eliminated_id]} –≤—ã–±—ã–ª –∏–∑ –∏–≥—Ä—ã."

    else:
        text += "\n–ù–∏–∫—Ç–æ –Ω–µ –≤—ã–±—ã–ª."

    # –û—á–∏—â–∞–µ–º –≥–æ–ª–æ—Å–∞
    votes.clear()

    await bot.send_message(chat_id, text)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot))
