import os
import random
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

API_TOKEN = os.getenv("BOT_TOKEN")  # –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
players = {}
roles = {}
alive_players = set()
votes = {}
game_started = False

ROLE_LIST = ["–ú–∞—Ñ–∏—è", "–î–æ–∫—Ç–æ—Ä", "–ö–æ–º–∏—Å—Å–∞—Ä", "–ú–∏—Ä–Ω—ã–π"]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üôã‚Äç‚ôÇÔ∏è –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join"),
                InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤", callback_data="status")
            ],
            [
                InlineKeyboardButton(text="üé≤ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="startgame"),
                InlineKeyboardButton(text="‚öîÔ∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data="vote")
            ]
        ]
    )

def back_to_menu():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="menu")]
        ]
    )

# /start
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ú–∞—Ñ–∏—è-–±–æ—Ç.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )

# /menu
@dp.message(Command("menu"))
async def menu(message: Message):
    await message.answer(
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

# /help
@dp.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer(
        "‚ÑπÔ∏è –ë–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –º–∞—Ñ–∏—é.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/menu ‚Äì –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é\n"
        "/join ‚Äì –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è\n"
        "/startgame ‚Äì –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/status ‚Äì —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤\n"
        "/vote ‚Äì –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"
    )

# –ö–Ω–æ–ø–∫–∞: –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "menu")
async def cb_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

# –ö–Ω–æ–ø–∫–∞: –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
@dp.callback_query(lambda c: c.data == "join")
async def cb_join(callback: CallbackQuery):
    global game_started
    uid = callback.from_user.id
    uname = callback.from_user.full_name

    if game_started:
        await callback.answer("–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç!")
        return

    if uid in players:
        await callback.answer("–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å.")
    else:
        players[uid] = uname
        await callback.message.answer(f"{uname} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è. –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(players)}.")

    await callback.message.edit_text(
        "‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å.",
        reply_markup=back_to_menu()
    )

# –ö–Ω–æ–ø–∫–∞: —Å—Ç–∞—Ç—É—Å
@dp.callback_query(lambda c: c.data == "status")
async def cb_status(callback: CallbackQuery):
    if not players:
        text = "‚ùå –ù–∏–∫—Ç–æ –µ—â—ë –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è."
    else:
        text = "üë• –ò–≥—Ä–æ–∫–∏:\n" + "\n".join(f"- {n}" for n in players.values())

    await callback.message.edit_text(
        text,
        reply_markup=back_to_menu()
    )

# –ö–Ω–æ–ø–∫–∞: –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É
@dp.callback_query(lambda c: c.data == "startgame")
async def cb_startgame(callback: CallbackQuery):
    global game_started, alive_players
    if game_started:
        await callback.answer("–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç.")
        return
    if len(players) < 3:
        await callback.message.edit_text(
            "‚ùó –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –∏–≥—Ä–æ–∫–∞.",
            reply_markup=back_to_menu()
        )
        return

    game_started = True
    alive_players = set(players.keys())
    await callback.message.answer("üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –†–æ–ª–∏ —Ä–∞—Å—Å—ã–ª–∞—é—Ç—Å—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    ids = list(players.keys())
    random.shuffle(ids)

    mafia = ids.pop()
    roles[mafia] = "–ú–∞—Ñ–∏—è"
    await bot.send_message(mafia, "–í—ã –ú–ê–§–ò–Ø.")

    if ids:
        doctor = ids.pop()
        roles[doctor] = "–î–æ–∫—Ç–æ—Ä"
        await bot.send_message(doctor, "–í—ã –î–û–ö–¢–û–†.")

    if ids:
        commissar = ids.pop()
        roles[commissar] = "–ö–æ–º–∏—Å—Å–∞—Ä"
        await bot.send_message(commissar, "–í—ã –ö–û–ú–ò–°–°–ê–†.")

    for uid in ids:
        roles[uid] = "–ú–∏—Ä–Ω—ã–π"
        await bot.send_message(uid, "–í—ã –ú–ò–†–ù–´–ô –∂–∏—Ç–µ–ª—å.")

    await callback.message.edit_text(
        "‚úÖ –†–æ–ª–∏ —Ä–æ–∑–¥–∞–Ω—ã.",
        reply_markup=back_to_menu()
    )

# –ö–Ω–æ–ø–∫–∞: –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
@dp.callback_query(lambda c: c.data == "vote")
async def cb_vote(callback: CallbackQuery):
    if not game_started:
        await callback.message.edit_text(
            "‚ö†Ô∏è –ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å.",
            reply_markup=back_to_menu()
        )
        return

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=players[uid],
                    callback_data=f"vote_{uid}"
                )
            ] for uid in alive_players
        ]
    )

    await callback.message.edit_text(
        "‚öîÔ∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: –∫–æ–≥–æ –∫–∞–∑–Ω–∏—Ç—å?",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤
@dp.callback_query(lambda c: c.data.startswith("vote_"))
async def process_vote(callback: CallbackQuery):
    voter = callback.from_user.id
    target = int(callback.data.split("_")[1])

    if voter not in alive_players:
        await callback.answer("–í—ã –º–µ—Ä—Ç–≤—ã.")
        return

    votes[voter] = target
    await callback.answer(f"–ì–æ–ª–æ—Å –∑–∞ {players[target]}.")

    if len(votes) == len(alive_players):
        tally = {}
        for t in votes.values():
            tally[t] = tally.get(t, 0) + 1
        victim = max(tally, key=tally.get)
        alive_players.remove(victim)

        text = (
            f"‚ò†Ô∏è {players[victim]} –±—ã–ª –∫–∞–∑–Ω—ë–Ω.\n"
            f"–û–Ω –±—ã–ª —Ä–æ–ª—å—é: {roles[victim]}."
        )
        await bot.send_message(callback.message.chat.id, text)

        mafia_alive = [uid for uid in alive_players if roles[uid] == "–ú–∞—Ñ–∏—è"]
        others_alive = [uid for uid in alive_players if roles[uid] != "–ú–∞—Ñ–∏—è"]
        if not mafia_alive:
            await bot.send_message(callback.message.chat.id, "üéâ –ú–∏—Ä–Ω—ã–µ –ø–æ–±–µ–¥–∏–ª–∏!")
            reset_game()
        elif len(mafia_alive) >= len(others_alive):
            await bot.send_message(callback.message.chat.id, "üíÄ –ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞!")
            reset_game()
        else:
            votes.clear()
            await bot.send_message(callback.message.chat.id, "üåô –ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å (–≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–æ—á—å –≤—Ä—É—á–Ω—É—é).")

def reset_game():
    global game_started, players, roles, alive_players, votes
    game_started = False
    players = {}
    roles = {}
    alive_players = set()
    votes = {}

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    async def main():
        await dp.start_polling(bot)

    asyncio.run(main())
