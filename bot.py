import asyncio
import logging
import os
import random
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    BufferedInputFile
)

from db import Database  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å db.py —Å –∫–ª–∞—Å—Å–æ–º Database

# –ó–∞–¥–∞—ë–º —Ç–æ–∫–µ–Ω –∏ DSN –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
DB_URL = os.getenv("DATABASE_URL")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=types.ParseMode.HTML)
)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
# –§–æ—Ä–º–∞—Ç: {chat_id: {"game_id": int, "alive_players": {user_id: role}, "votes": {voter_id: voted_id}}}
ongoing_games = {}

def get_main_menu():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton("üôã –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join")],
            [InlineKeyboardButton("üé≤ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="startgame")],
        ]
    )

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=get_main_menu()
    )

@dp.callback_query(lambda c: c.data == "join")
async def join(callback: types.CallbackQuery, db: Database):
    await db.add_player(callback.from_user.id, callback.from_user.full_name)
    await callback.message.answer(f"{callback.from_user.full_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

@dp.callback_query(lambda c: c.data == "startgame")
async def startgame(callback: types.CallbackQuery, db: Database):
    chat_id = callback.message.chat.id
    game_id = await db.create_game(chat_id)

    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞: –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞
    members = await bot.get_chat_administrators(chat_id)
    ids = [m.user.id for m in members if not m.user.is_bot]

    if not ids:
        await callback.message.answer("–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤.")
        return

    mafia_count = 2 if len(ids) >= 5 else 1
    mafia_ids = random.sample(ids, mafia_count)

    alive = {}
    for uid in ids:
        role = "–ú–∞—Ñ–∏—è" if uid in mafia_ids else "–ú–∏—Ä–Ω—ã–π"
        await db.add_participant(game_id, uid, role)
        image = await db.get_role_image(role)
        caption = f"–í–∞—à–∞ —Ä–æ–ª—å: {role}"
        if image:
            await bot.send_photo(
                uid,
                BufferedInputFile(image, filename="role.jpg"),
                caption=caption
            )
        else:
            await bot.send_message(uid, caption)
        alive[uid] = role

    ongoing_games[chat_id] = {
        "game_id": game_id,
        "alive_players": alive,
        "votes": {}
    }

    await callback.message.answer("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!")

@dp.message(Command("vote"))
async def vote(message: types.Message):
    chat_id = message.chat.id
    game = ongoing_games.get(chat_id)
    if not game:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(str(uid), callback_data=f"vote_{uid}")]
            for uid in game["alive_players"]
        ]
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ –∫–∞–∑–Ω–∏—Ç—å:", reply_markup=markup)

@dp.callback_query(lambda c: c.data.startswith("vote_"))
async def process_vote(callback: types.CallbackQuery, db: Database):
    chat_id = callback.message.chat.id
    game = ongoing_games.get(chat_id)
    if not game:
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return

    voter = callback.from_user.id
    target = int(callback.data.split("_")[1])

    game["votes"][voter] = target
    await callback.answer("–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω.")

    if len(game["votes"]) == len(game["alive_players"]):
        # –ü–æ–¥—Å—á—ë—Ç –≥–æ–ª–æ—Å–æ–≤
        tally = {}
        for t in game["votes"].values():
            tally[t] = tally.get(t, 0) + 1

        eliminated = max(tally, key=tally.get)
        await db.mark_dead(game["game_id"], eliminated)

        role = game["alive_players"].pop(eliminated)
        await bot.send_message(chat_id, f"{eliminated} –≤—ã–±—ã–ª. –ï–≥–æ —Ä–æ–ª—å: {role}")

        mafia_left = [r for r in game["alive_players"].values() if r == "–ú–∞—Ñ–∏—è"]
        citizens_left = [r for r in game["alive_players"].values() if r != "–ú–∞—Ñ–∏—è"]

        winner = None
        if not mafia_left:
            winner = "–ú–∏—Ä–Ω—ã–µ"
        elif len(mafia_left) >= len(citizens_left):
            winner = "–ú–∞—Ñ–∏—è"

        if winner:
            await db.finalize_game(game["game_id"], winner)
            await bot.send_message(chat_id, f"üéâ –ü–æ–±–µ–¥–∏–ª–∏ {winner}!")
            ongoing_games.pop(chat_id)
        else:
            game["votes"] = {}
            await bot.send_message(chat_id, "–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")

@dp.message(Command("stats"))
async def stats(message: types.Message, db: Database):
    row = await db.get_player_stats(message.from_user.id)
    if row:
        text = (
            f"–ò–≥—Ä—ã —Å—ã–≥—Ä–∞–Ω–æ: {row['games_played']}\n"
            f"–ü–æ–±–µ–¥: {row['games_won']}\n"
            f"–ü–æ–±–µ–¥ –∑–∞ –º–∞—Ñ–∏—é: {row['mafia_wins']}\n"
            f"–ü–æ–±–µ–¥ –∑–∞ –º–∏—Ä–Ω—ã—Ö: {row['citizen_wins']}"
        )
    else:
        text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ."
    await message.answer(text)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    async def main():
        db = Database(DB_URL)
        await db.connect()
        dp.workflow_data["db"] = db
        await dp.start_polling(bot)

    asyncio.run(main())
