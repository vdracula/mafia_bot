import asyncio
import logging
import os
import random

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    BufferedInputFile
)

from db import Database

TOKEN = os.getenv("BOT_TOKEN")
DB_URL = os.getenv("DATABASE_URL")

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

lobbies = {}
ongoing_games = {}

def get_lobby_menu(is_host=False):
    buttons = [
        [InlineKeyboardButton(text="üôã –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join_lobby")]
    ]
    if is_host:
        buttons.append([InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_lobby")])
        buttons.append([InlineKeyboardButton(text="üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data="end_game")])
        buttons.append([InlineKeyboardButton(text="üó≥ –ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ", callback_data="start_vote")])
        buttons.append([InlineKeyboardButton(text="üìä –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="all_stats")])
    buttons.append([InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.message(Command("start"))
async def start(message: Message):
    buttons = [
        [InlineKeyboardButton(text="üéÆ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", callback_data="create_lobby")],
        [InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)

@dp.callback_query(lambda c: c.data == "create_lobby")
async def create_lobby(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    lobbies[chat_id] = {
        "host_id": user_id,
        "players": {}
    }
    await callback.message.answer(
        f"üéÆ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤–µ–¥—É—â–∏–º {callback.from_user.full_name}. –ò–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è.",
        reply_markup=get_lobby_menu(is_host=True)
    )

@dp.callback_query(lambda c: c.data == "join_lobby")
async def join_lobby(callback: CallbackQuery, db: Database):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    if chat_id not in lobbies:
        await callback.message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–æ–±–±–∏. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É.")
        return
    lobbies[chat_id]["players"][user_id] = callback.from_user.full_name
    await db.add_player(user_id, callback.from_user.full_name)
    await callback.message.answer(f"{callback.from_user.full_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ.")

@dp.callback_query(lambda c: c.data == "start_lobby")
async def start_lobby(callback: CallbackQuery, db: Database):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id

    lobby = lobbies.get(chat_id)
    if not lobby or lobby["host_id"] != user_id:
        await callback.message.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
        return

    players = list(lobby["players"].keys())
    if len(players) < 2:
        await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ (–º–∏–Ω–∏–º—É–º 2).")
        return

    chat_title = callback.message.chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    game_id = await db.create_game(chat_id, chat_title)

    mafia_count = 2 if len(players) >= 5 else 1
    mafia_ids = random.sample(players, mafia_count)

    alive = {}
    for uid in players:
        role = "–ú–∞—Ñ–∏—è" if uid in mafia_ids else "–ú–∏—Ä–Ω—ã–π"
        await db.add_participant(game_id, uid, role)
        image = await db.get_role_image(role)
        caption = f"–í–∞—à–∞ —Ä–æ–ª—å: {role}"
        if image:
            await bot.send_photo(
                uid,
                BufferedInputFile(image, filename="role.jpg"),
                caption=caption
            )
        else:
            await bot.send_message(uid, caption)
        alive[uid] = role

    ongoing_games[chat_id] = {
        "game_id": game_id,
        "host_id": user_id,
        "alive_players": alive,
        "votes": {}
    }
    lobbies.pop(chat_id)
    await callback.message.answer("üé≤ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!", reply_markup=get_lobby_menu(is_host=True))

@dp.callback_query(lambda c: c.data == "start_vote")
async def start_vote(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    game = ongoing_games.get(chat_id)
    if not game or game["host_id"] != user_id:
        await callback.message.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.")
        return

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=uid, callback_data=f"vote_{uid}")]
            for uid in game["alive_players"]
        ]
    )
    await callback.message.answer("üó≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ –∫–∞–∑–Ω–∏—Ç—å:", reply_markup=markup)

@dp.callback_query(lambda c: c.data.startswith("vote_"))
async def process_vote(callback: CallbackQuery, db: Database):
    chat_id = callback.message.chat.id
    game = ongoing_games.get(chat_id)
    if not game:
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return

    voter = callback.from_user.id
    target = int(callback.data.split("_")[1])
    if voter not in game["alive_players"]:
        await callback.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ.")
        return

    game["votes"][voter] = target
    await callback.answer("–í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω.")

    if len(game["votes"]) == len(game["alive_players"]):
        tally = {}
        for t in game["votes"].values():
            tally[t] = tally.get(t, 0) + 1
        eliminated = max(tally, key=tally.get)
        await db.mark_dead(game["game_id"], eliminated)
        role = game["alive_players"].pop(eliminated)
        await bot.send_message(chat_id, f"{eliminated} –≤—ã–±—ã–ª. –ï–≥–æ —Ä–æ–ª—å: {role}")

        mafia_left = [r for r in game["alive_players"].values() if r == "–ú–∞—Ñ–∏—è"]
        citizens_left = [r for r in game["alive_players"].values() if r != "–ú–∞—Ñ–∏—è"]

        winner = None
        if not mafia_left:
            winner = "–ú–∏—Ä–Ω—ã–µ"
        elif len(mafia_left) >= len(citizens_left):
            winner = "–ú–∞—Ñ–∏—è"

        if winner:
            await db.finalize_game(game["game_id"], winner)
            await bot.send_message(chat_id, f"üéâ –ü–æ–±–µ–¥–∏–ª–∏ {winner}!")
            ongoing_games.pop(chat_id)
        else:
            game["votes"] = {}
            await bot.send_message(chat_id, "–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")

@dp.callback_query(lambda c: c.data == "end_game")
async def end_game(callback: CallbackQuery, db: Database):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    game = ongoing_games.get(chat_id)
    if not game or game["host_id"] != user_id:
        await callback.message.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É.")
        return

    await db.finalize_game(game["game_id"], winner="–ü—Ä–µ—Ä–≤–∞–Ω–æ")
    ongoing_games.pop(chat_id)
    await callback.message.answer("üõë –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤–µ–¥—É—â–∏–º.")

@dp.callback_query(lambda c: c.data == "my_stats")
async def my_stats(callback: CallbackQuery, db: Database):
    row = await db.get_player_stats(callback.from_user.id)
    if row:
        text = (
            f"üë§ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–ò–≥—Ä—ã: {row['games_played']}\n"
            f"–ü–æ–±–µ–¥—ã: {row['games_won']}\n"
            f"–ü–æ–±–µ–¥—ã –∑–∞ –º–∞—Ñ–∏—é: {row['mafia_wins']}\n"
            f"–ü–æ–±–µ–¥—ã –∑–∞ –º–∏—Ä–Ω—ã—Ö: {row['citizen_wins']}"
        )
    else:
        text = "–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
    await callback.message.answer(text)

@dp.callback_query(lambda c: c.data == "all_stats")
async def all_stats(callback: CallbackQuery, db: Database):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    game = ongoing_games.get(chat_id)
    if not game or game["host_id"] != user_id:
        await callback.message.answer("‚ùå –¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        return

    rows = await db.get_all_player_stats()
    if not rows:
        await callback.message.answer("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for r in rows:
        text += (
            f"‚Äî {r['username']}\n"
            f"  –ò–≥—Ä—ã: {r['games_played']}, –ü–æ–±–µ–¥—ã: {r['games_won']}, "
            f"–ú–∞—Ñ–∏—è: {r['mafia_wins']}, –ú–∏—Ä–Ω—ã–µ: {r['citizen_wins']}\n\n"
        )
    await callback.message.answer(text)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    async def main():
        db = Database(DB_URL)
        if not DB_URL:
            raise ValueError("DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        await db.connect()
        dp.workflow_data["db"] = db
        await dp.start_polling(bot)

    asyncio.run(main())
