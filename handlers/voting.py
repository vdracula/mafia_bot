from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from keyboards import voting_keyboard
from utils import get_alive_players, save_vote, finish_voting

router = Router()

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class VotingStates(StatesGroup):
    choosing_candidates = State()
    collecting_votes = State()

@router.message(F.text == "/vote")
async def start_voting(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω–∏–º ID –∏–≥—Ä—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await state.set_state(VotingStates.choosing_candidates)
    await message.answer(
        "üîç <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.</b>\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª."
    )

@router.message(VotingStates.choosing_candidates)
async def choose_candidates(message: Message, state: FSMContext):
    ids = message.text.strip().split()
    if not ids:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.")
        return

    candidate_ids = [int(x) for x in ids]
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    await state.update_data(candidates=candidate_ids)
    await state.set_state(VotingStates.collecting_votes)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    alive_players = await get_alive_players()

    # –†–∞—Å—Å—ã–ª–∫–∞ –∂–∏–≤—ã–º –∏–≥—Ä–æ–∫–∞–º –∫–Ω–æ–ø–æ–∫
    for player in alive_players:
        await message.bot.send_message(
            player.telegram_id,
            "üó≥Ô∏è <b>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:",
            reply_markup=voting_keyboard(
                [(c, f"–ò–≥—Ä–æ–∫ {c}") for c in candidate_ids]
            )
        )

    await message.answer("‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –û–∂–∏–¥–∞–µ–º –≥–æ–ª–æ—Å–∞.")

@router.callback_query(F.data.startswith("vote_"))
async def receive_vote(query: CallbackQuery):
    voter_id = query.from_user.id
    voted_player_id = int(query.data.split("_")[1])

    await save_vote(voter_id, voted_player_id)

    await query.answer("‚úÖ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω.", show_alert=True)
    await query.message.edit_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –≥–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç.")

@router.message(F.text == "/endvote")
async def end_voting(message: Message):
    results = await finish_voting()
    text = "üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:</b>\n"
    for player_id, count in results.items():
        text += f"–ò–≥—Ä–æ–∫ {player_id}: {count} –≥–æ–ª–æ—Å–æ–≤\n"
    await message.answer(text)
