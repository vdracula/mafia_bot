# handlers/room_handlers.py

__all__ = ["create_room", "join_room", "list_rooms", "message_handler", "select_room_handler"]
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from db import rooms
from utils import get_user_name, assign_roles, send_private_role

async def create_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool = context.bot_data['pool']
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    async with pool.acquire() as conn:
        # Check if user already has a room
        existing_room = await conn.fetchrow(
            'SELECT id FROM rooms WHERE host_id = $1 AND started = FALSE',
            user_id
        )
        
        if existing_room:
            await update.message.reply_text("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞.")
            return
            
        # Create new room
        room_name = f"room_{user_id}_{int(time.time())}"
        room_id = await conn.fetchval(
            'INSERT INTO rooms (name, host_id, chat_id) VALUES ($1, $2, $3) RETURNING id',
            room_name, user_id, chat_id
        )
        
        # Add host as player
        await conn.execute(
            'INSERT INTO players (user_id, room_id) VALUES ($1, $2)',
            user_id, room_id
        )
    
    await update.message.reply_text(f"‚úÖ –ö–æ–º–Ω–∞—Ç–∞ '{room_name}' —Å–æ–∑–¥–∞–Ω–∞!")
        
async def create_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if isinstance(update, Update):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã:")
    else:
        await update.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã:")

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id

    if context.user_data.get('waiting_for_room_name'):
        room_name = text
        if room_name in rooms:
            await update.message.reply_text("–ö–æ–º–Ω–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        from config import YOUR_ADMIN_ID
        rooms[room_name] = {
            "host": user_id,
            "chat_id": update.effective_chat.id,
            "players": [],
            "roles": {
                "–ú–∞—Ñ–∏—è": 1,
                "–î–æ–∫—Ç–æ—Ä": 1,
                "–ö–æ–º–∏—Å—Å–∞—Ä": 1,
                "–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å": 5
            },
            "assigned_roles": {},
            "started": False,
            "stage": None,
            "votes": {}
        }

        await update.message.reply_text(f"‚úÖ –ö–æ–º–Ω–∞—Ç–∞ '{room_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        rooms[room_name]["players"].append(user_id)
        await update.message.reply_text(f"–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ '{room_name}'.")
        await show_current_roles(update, context, room_name, rooms[room_name])

async def join_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not rooms:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç.")
        return

    keyboard = [[InlineKeyboardButton(room_name, callback_data=f"select_join_{room_name}")] for room_name in rooms]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:", reply_markup=reply_markup)

async def select_room_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("select_join_"):
        room_name = data.replace("select_join_", "")
        if room_name in rooms:
            room = rooms[room_name]
            if query.from_user.id in room["players"]:
                await query.edit_message_text("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.")
                return
            room["players"].append(query.from_user.id)
            await query.edit_message_text(f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ '{room_name}'.")
            await show_current_roles(query, context, room_name, room)

async def show_current_roles(update: Update, context: ContextTypes.DEFAULT_TYPE, room_name=None, room=None):
    if not room_name or not room:
        user_id = update.effective_user.id
        for rn, r in rooms.items():
            if user_id in r["players"]:
                room_name = rn
                room = r
                break
        else:
            return
    msg = "üé≠ –¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏:\n"
    for role, count in room["roles"].items():
        msg += f"{role}: {count}\n"
    total = sum(room["roles"].values())
    msg += f"\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {total}"
    await update.message.reply_text(msg)

    # handlers/room_handlers.py

async def list_rooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not rooms:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç.")
        return

    msg = "üö™ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:\n"
    for room_name, room in rooms.items():
        status = "üéÆ –í –∏–≥—Ä–µ" if room["started"] else "üïí –û–∂–∏–¥–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤"
        players_count = len(room["players"])
        msg += f"‚Ä¢ {room_name} ({players_count} –∏–≥—Ä–æ–∫–æ–≤) ‚Äî {status}\n"

    await update.message.reply_text(msg)

__all__ = ["create_room", "join_room", "list_rooms", "message_handler", "select_room_handler"]