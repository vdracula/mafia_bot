from aiogram import Router, types
from aiogram.filters import Command
from sqlalchemy import select
from database import async_session
from models import Game, Player

router = Router()

@router.message(Command("newgame"))
async def new_game(message: types.Message):
    async with async_session() as session:
        # –°–æ–∑–¥–∞—ë–º –∏–≥—Ä—É
        game = Game()
        session.add(game)
        await session.commit()
        await session.refresh(game)

    await message.answer(f"üé≤ –ù–æ–≤–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! ID –∏–≥—Ä—ã: <b>{game.id}</b>\n–î–æ–±–∞–≤—å—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é /addplayer")

@router.message(Command("addplayer"))
async def add_player(message: types.Message):
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n<code>/addplayer [ID –∏–≥—Ä—ã] [–ò–º—è –∏–≥—Ä–æ–∫–∞]</code>")
        return

    try:
        game_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è ID –∏–≥—Ä—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    player_name = args[2]

    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–≥—Ä–∞
        result = await session.execute(select(Game).where(Game.id == game_id))
        game = result.scalar_one_or_none()
        if not game:
            await message.answer("‚ùå –ò–≥—Ä–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        player = Player(game_id=game.id, name=player_name)
        session.add(player)
        await session.commit()

    await message.answer(f"‚úÖ –ò–≥—Ä–æ–∫ <b>{player_name}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥—Ä—É {game.id}.")

@router.message(Command("listplayers"))
async def list_players(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n<code>/listplayers [ID –∏–≥—Ä—ã]</code>")
        return

    try:
        game_id = int(args[1])
    except ValueError:
        await message.answer("‚ö†Ô∏è ID –∏–≥—Ä—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    async with async_session() as session:
        result = await session.execute(select(Game).where(Game.id == game_id))
        game = result.scalar_one_or_none()
        if not game:
            await message.answer("‚ùå –ò–≥—Ä–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        players = game.players
        if not players:
            await message.answer("üôÅ –í —ç—Ç–æ–π –∏–≥—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤.")
            return

        text = "\n".join(
            [f"{idx+1}. {p.name} (ID {p.id})" for idx, p in enumerate(players)]
        )
        await message.answer(f"üë• –ò–≥—Ä–æ–∫–∏ –∏–≥—Ä—ã {game.id}:\n\n{text}")

def register(dp):
    dp.include_router(router)
